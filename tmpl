#!/usr/bin/env bash

# Find the tmpl dir.
TMPL_DIR="${TMPL_DIR:-"${XDG_TEMPLATES_DIR:-"$HOME/Templates"}"}"
if [ ! -d "$TMPL_DIR" ]; then
    printf "Directory \"$TMPL_DIR\" does not exist. Create it or set \$TMPL_DIR or \$XDG_TEMPLATES_DIR to an existing directory." >&2
    exit 1
fi

# Find editor
EDITOR="${EDITOR:-"vim"}"

msg() {
    # Print msg to stderr.
    [ "$VERBOSE" -ge "$1" ] && printf "%s\n" "$2" >&2
}

err_exit(){
    # Print msg and exit.
    printf "%s\n" "$1"
    exit 1
}

# Usage echo
usage() {
    printf """XDG Templates CLI.
Template dir: %s

Usage:
  tmpl [-h] [-e]
    -h                                 Display this help message.
    -e                                 Open 'DEST' in \$EDITOR.
    -v                                 Verbosity.
  tmpl add [-b BRANCH] SOURCE [DEST]   Add 'SOURCE' to tmpl folder.
    -b BRANCH                          Github/Gitlab branch, when using git shorthand, default \"master\".
    SOURCE                             File/directory, \"-\", url or Github/Gitlab shorthand, i.e. g[hl]:user/repo/(folder/)file.
    DEST                               Optional, destination name in tmpl folder, default 'SOURCE' filename.
  tmpl fetch TEMPLATE [DEST]           Fetch 'TEMPLATE' from tmpl folder.
    TEMPLATE                           Template in tmpl folder to fetch.
    DEST                               Optional, template destination, default cwd.
  tmpl COMMAND [...]                   Run 'COMMAND' in tmpl folder.

""" $TMPL_DIR
}

join_by () {
    # Join args on $1.
    local IFS="$1"
    shift
    printf "$*"
}

add_github () {
    # Download a file from github.
    declare -a url_array=(${1//'/'/ })
    local rest="${url_array[@]:2}"
    local dest="$2"
    local gh_url="https://raw.githubusercontent.com/${url_array[0]}/${url_array[1]}/$BRANCH/$(join_by / $rest)"
    msg 1 "github url: $gh_url"
    curl --silent --fail "$gh_url" -o "$dest" || err_exit "Failed to download from github."
}

add_gitlab () {
    # Download a file from gitlab.
    declare -a url_array=(${1//'/'/ })
    local rest="${url_array[@]:2}"
    local dest="$2"
    local gl_url="https://gitlab.com/${url_array[0]}/${url_array[1]}/-/raw/$BRANCH/$(join_by / $rest)"
    msg 1 "gitlab url: $gl_url"
    curl --silent --fail "$gl_url" -o "$dest" || err_exit "Failed to download from gitlab."
}

# Defaults
BRANCH="master"
EDIT=""
SOURCE=""
DEST=""
TEMPLATE=""
VERBOSE=0

# Parse options to the `tmpl` command
while getopts ":hev" opt; do
    case ${opt} in
        "h" )
            usage
            exit 0
            ;;
        "e" )
            EDIT=1
            ;;
        "v" )
            VERBOSE=$((VERBOSE + 1))
            ;;
        "?" )
            printf "Invalid Option: -%s\n" $OPTARG >&2
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))
# reset OPTIND
OPTIND=0

SUBCOMMAND="$1"
shift  # Remove from args
case "$SUBCOMMAND" in
    # Parse options to the sub command
    "add" )
        while getopts ":b:" opt; do
            case ${opt} in
                "b" )
                    BRANCH="$OPTARG"
                    ;;
                "?" )
                    printf "Invalid Option: -%s\n" $OPTARG 1>&2
                    usage
                    exit 1
                    ;;
                ":" )
                    printf "Invalid Option: -%s requires an argument.\n" $OPTARG 1>&2
                    usage
                    exit 1
                    ;;
            esac
        done
        shift $((OPTIND - 1))

        [ "$#" -gt 2 ] && err_exit "Invalid number of arguments."
        [ "$#" = 0 ] && err_exit "No SOURCE provided."

        SOURCE="${1}"
        DEST="$TMPL_DIR/$(basename "${2:-$SOURCE}")"

        msg 2 "add source: $SOURCE"
        msg 2 "add dest: $DEST"

        if [ "$SOURCE" = "-" ] && [ -z "$2" ]; then
            err_exit "No DEST provided."
        fi

        case "$SOURCE" in
            gh:*/*/* )
                # try to add github
                add_github "${SOURCE#"gh:"}" "$DEST"
                ;;
            gl:*/*/* )
                # try to add gitlab
                add_gitlab "${SOURCE#"gl:"}" "$DEST"
                ;;
            https:* | http:* )
                # download file
                curl --silent --fail "$SOURCE" -o "$DEST" || err_exit "Failed to download \"$SOURCE\" -> \"$DEST\""
                ;;
            "-" )
                # from stdin
                cat > "$DEST" || err_exit "Failed to write from stdin -> \"$DEST\""
                ;;
            * )
                # just cp
                cp -r "$SOURCE" "$DEST" || err_exit "Failed to copy \"$SOURCE\" -> \"$DEST\""
                ;;
        esac
        # maybe open in editor
        [ -n "$EDIT" ] && "$EDITOR" "$DEST"
        ;;

    "fetch" )
        [ "$#" -gt 2 ] && err_exit "Invalid number of arguments."
        [ "$#" = 0 ] && err_exit "No TEMPLATE provided."

        TEMPLATE="$TMPL_DIR/$1"
        DEST="${2:-"./$(basename "$TEMPLATE")"}"

        msg 2 "fetch template: $TEMPLATE"
        msg 2 "fetch dest: $DEST"

        case "$DEST" in
            "-" )
                cat "$TEMPLATE" || err_exit "Failed to write to stdin."
                ;;
            * )
                cp -r "$TEMPLATE" "$DEST" || err_exit "Failed to copy \"$TEMPLATE\" -> \"$DEST\""
                ;;
        esac
        # maybe open in editor
        [ -n "$EDIT" ] && "$EDITOR" "$DEST"
        ;;

    "" )
        usage
        exit 0
        ;;

    * )
        # cd and run command
        cd "$TMPL_DIR" && $SUBCOMMAND $@
        ;;
esac
