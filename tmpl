#!/usr/bin/env bash

# Find the tmpl dir.
TMPL_DIR="${TMPL_DIR:-"${XDG_TEMPLATES_DIR:-"$HOME/Templates"}"}"
[ ! -d "$TMPL_DIR" ] && { printf "Directory \"$TMPL_DIR\" does not exist. Create it or set \$TMPL_DIR or \$XDG_TEMPLATES_DIR to an existing directory." 1>&2; exit 1; }

# Find editor
EDITOR="${EDITOR:-"vim"}"

# Usage echo
usage() {
    printf """XDG Templates CLI.
Template dir: %s

Usage:
  tmpl [-h] [-e]
    -h                                 Display this help message.
    -e                                 Open 'DEST' in \$EDITOR.
  tmpl add [-b BRANCH] SOURCE [DEST]   Add 'SOURCE' to tmpl folder.
    -b BRANCH                          Github/Gitlab branch, when using git shorthand, default \"master\".
    SOURCE                             File/directory, \"-\", url or Github/Gitlab shorthand, i.e. g[hl]:user/repo/(folder/)file.
    DEST                               Optional, destination name in tmpl folder, default 'SOURCE' filename.
  tmpl fetch TEMPLATE [DEST]           Fetch 'TEMPLATE' from tmpl folder.
    TEMPLATE                           Template in tmpl folder to fetch.
    DEST                               Optional, template destination, default cwd.
  tmpl COMMAND [...]                   Run 'COMMAND' in tmpl folder.""" $TMPL_DIR
}

add () {
    local source="$1"
    local dest="$2"

    # if file or directory
    ( [ -f "$source" ] || [ -d "$source" ] ) && cp -r "$source" "$dest" && return 0
    # read from stdin
    [ "$source" == "-" ] && cat > "$dest" && return 0
    # check github/gitlab
    [[ "$source" =~ gh\:(.+)/(.+)/(.+) ]] && add_github "${source/#gh:}" "$dest" && return 0
    [[ "$source" =~ gl\:(.+)/(.+)/(.+) ]] && add_gitlab "${source/#gl:}" "$dest" && return 0
    # try url
    curl -s -f "$source" -o "$dest" && return 0

    printf "\"%s\" not recognized.\n" $source 1>&2
    return 1
}

join_by () { local IFS="$1"; shift; echo "$*"; }

add_github () {
    local array=(${1//'/'/ })
    local rest=${array[@]:2}
    local code=$(curl -s -f -w "%{http_code}" "https://raw.githubusercontent.com/${array[0]}/${array[1]}/$branch/$(join_by / $rest)" -o "$2")
    [ "$code" -ne 200 ] && { rm "$2" 2> /dev/null; return 1; }
    # Needed to have a 0 return code
    return 0
}

add_gitlab () {
    local array=(${1//'/'/ })
    local rest=${array[@]:2}
    local code=$(curl -s -f -w "%{http_code}" "https://gitlab.com/${array[0]}/${array[1]}/-/raw/$branch/$(join_by / $rest)" -o "$2")
    [ "$code" -ne 200 ] && { rm "$2" 2> /dev/null; return 1; }
    # Needed to have a 0 return code
    return 0
}

fetch () {
    local template="$1"
    local dest="$2"

    # if output to stdout
    [ "$dest" = "-" ] && cat "$template" && return 0
    # if just a normal file
    ( [ -f "$template" ] || [ -d "$template" ] ) && cp -r "$template" "$dest"
    return 0
}

# Defaults
branch="master"
edit=false
add_source="-"
add_dest=""
fetch_template=""
fetch_dest="."

# Parse options to the `tmpl` command
while getopts ":he" opt; do
    case ${opt} in
        "h" )
            usage
            exit 0
            ;;
        "e" )
            edit=true
            ;;
        \? )
            printf "Invalid Option: -%s\n" $OPTARG 1>&2
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))
#reset OPTIND
OPTIND=1

subcommand=$1; shift  # Remove 'tmpl' from the argument list
case "$subcommand" in
    # Parse options to the sub command
    "add" )
        while getopts ":b:" opt; do
            case ${opt} in
                "b" )
                    branch="$OPTARG"
                    ;;
                \? )
                    printf "Invalid Option: -%s\n" $OPTARG 1>&2
                    usage
                    exit 1
                    ;;
                ":" )
                    printf "Invalid Option: -%s requires an argument.\n" $OPTARG 1>&2
                    usage
                    exit 1
                    ;;
            esac
        done
        shift $((OPTIND -1))
        [ "$#" -gt 2 ] && ( printf "Invalid number of arguments.\n" 1>&2; usage ) && exit 1
        [ -z "$1" ] && ( printf "Required argument 'SOURCE' not provided.\n" 1>&2; usage ) && exit 1

        add_source="$1"
        add_dest="$2"
        # if dest is empty
        [ -z "$add_dest" ] && add_dest="$(basename $add_source)"
        add_dest="$TMPL_DIR/$add_dest"

        add "$add_source" "$add_dest" && $edit && $EDITOR "$add_dest"
        ;;

    "fetch" )
        [ "$#" -gt 2 ] && ( printf "Invalid number of arguments.\n" 1>&2; usage ) && exit 1
        [ -z "$1" ] && ( printf "Required argument 'TEMPLATE' not provided.\n" 1>&2; usage ) && exit 1

        fetch_template="$TMPL_DIR/$1"
        [ ! -f "$fetch_template" ] && printf "\"%s\" not found.\n" $fetch_template 1>&2 && exit 1
        # if no argument then fallback to default '.'
        [ ! -z "$2" ] && fetch_dest="$2"
        [ -d "$fetch_dest" ] && fetch_dest="$fetch_dest/$(basename $fetch_template)"

        fetch "$fetch_template" "$fetch_dest" && $edit && [ "$fetch_dest" != '-' ] && $EDITOR "$fetch_dest"
        ;;

    "" )
        usage
        exit 0
        ;;

    * )
        cd "$TMPL_DIR" && ( $subcommand "$@"; cd - >/dev/null ) && exit 0
        ;;
esac

